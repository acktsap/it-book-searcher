#!/bin/bash -e

SOURCE="${BASH_SOURCE[0]}"
# resolve $SOURCE until the file is no longer a symlink
while [ -h "$SOURCE" ]; do
  SCRIPT_HOME="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ $SOURCE != /* ]] && SOURCE="$SCRIPT_HOME/$SOURCE"
done
readonly SCRIPT_HOME="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"

# Directory definitions
readonly APP_HOME="$SCRIPT_HOME/.."
readonly APP_BIN="$APP_HOME/bin"
readonly APP_LIB="$APP_HOME/lib"
readonly APP_CONF="$APP_HOME/conf"

# Elasticsearch configs
readonly ES_VERSION="7.4.0"
readonly ES_DATA="$SCRIPT_HOME/data"
readonly ES_CONFIG="$APP_CONF/elasticsearch.yml"
readonly ES_JVM_OPTIONS="$APP_CONF/elasticsearch-jvm.options"

# Container config
readonly CONTAINER_NAME="elasticsearch"

EXISTING_CONTAINER=$(docker ps -aq -f name=${CONTAINER_NAME})
if [ -z ${EXISTING_CONTAINER} ]; then
  docker run -d --restart="always" --name ${CONTAINER_NAME} \
      -p 9200:9200 \
      -p 9300:9300 \
      -e "discovery.type=single-node" \
      -e "bootstrap.memory_lock=true" --ulimit memlock=-1:-1 \
      -v ${ES_DATA}:/usr/share/elasticsearch/data \
      -v ${ES_CONFIG}:/usr/share/elasticsearch/config/elasticsearch.yml \
      -v ${ES_JVM_OPTIONS}:/usr/share/elasticsearch/config/jvm.options \
      docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
else
  docker start ${EXISTING_CONTAINER}
fi
